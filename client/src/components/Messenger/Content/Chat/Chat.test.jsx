import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Chat from './Chat';
import { chatContext } from '../../../../contexts/chatContext';
import * as SendFetch from '../../../../fetch/ChatAPI';
import * as messagesFetch from '../../../../fetch/MessageAPI';
import * as ImageFetch from '../../../../fetch/ImageAPI';

afterEach(() => {
  vi.clearAllMocks();
});

const chatProfile = {
  about: 'First Child',
  full_name: 'Foobar',
  user_id: '1001',
  _id: '1',
};

const messages = [
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'Foobar to John Doe Feb 1',
    time_simple: '7:51 AM',
    _id: 'chatid0001',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'John Doe to Foobar Feb 1',
    time_simple: '8:51 AM',
    _id: 'chatid0002',
  },
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'Foobar to John Doe Feb 11',
    time_simple: '9:32 PM',
    _id: 'chatid0003',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'John Doe to Foobar Feb 11',
    time_simple: '10:32 PM',
    _id: 'chatid0004',
  },
];

const updatedMessages = [
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'Foobar to John Doe Feb 1',
    time_simple: '7:51 AM',
    _id: 'chatid0001',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'John Doe to Foobar Feb 1',
    time_simple: '8:51 AM',
    _id: 'chatid0002',
  },
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'Foobar to John Doe Feb 11',
    time_simple: '9:32 PM',
    _id: 'chatid0003',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'John Doe to Foobar Feb 11',
    time_simple: '10:32 PM',
    _id: 'chatid0004',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 22, 2024',
    text: 'John Doe to Foobar Feb 22',
    time_simple: '12:47 PM',
    _id: 'chatid0005',
  },
];

const updatedMessagesImage = [
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'Foobar to John Doe Feb 1',
    time_simple: '7:51 AM',
    _id: 'chatid0001',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 1, 2024',
    text: 'John Doe to Foobar Feb 1',
    time_simple: '8:51 AM',
    _id: 'chatid0002',
  },
  {
    author: '1001',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'Foobar to John Doe Feb 11',
    time_simple: '9:32 PM',
    _id: 'chatid0003',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 11, 2024',
    text: 'John Doe to Foobar Feb 11',
    time_simple: '10:32 PM',
    _id: 'chatid0004',
  },
  {
    author: '9999',
    chat: 'chat0001',
    date_med: 'Feb 22, 2024',
    image: {
      data: {
        data: [
          137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1,
          2, 0, 0, 0, 250, 8, 6, 0, 0, 0, 74, 249, 73, 144, 0, 0, 0, 1, 115, 82,
          71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 132, 101, 88, 73, 102, 77, 77,
          0, 42, 0, 0, 0, 8, 0, 5, 1, 18, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 26,
          0, 5, 0, 0, 0, 1, 0, 0, 0, 74, 1, 27, 0, 5, 0, 0, 0, 1, 0, 0, 0, 82,
          1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 135, 105, 0, 4, 0, 0, 0, 1, 0, 0,
          0, 90, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 72, 0, 0, 0, 1,
          0, 3, 160, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 160, 2, 0, 4, 0, 0, 0, 1,
          0, 0, 1, 2, 160, 3, 0, 4, 0, 0, 0, 1, 0, 0, 0, 250, 0, 0, 0, 0, 137,
          52, 124, 212, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 19, 0, 0, 11,
          19, 1, 0, 154, 156, 24, 0, 0, 1, 89, 105, 84, 88, 116, 88, 77, 76, 58,
          99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0,
          0, 0, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109,
          108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115,
          58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107,
          61, 34, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 52, 46, 48, 34,
          62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109,
          108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47,
          47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57,
          47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97,
          120, 45, 110, 115, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114,
          100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32,
          114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32,
          32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 116,
          105, 102, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46,
          97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47,
          49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60,
          116, 105, 102, 102, 58, 79, 114, 105, 101, 110, 116, 97, 116, 105,
          111, 110, 62, 49, 60, 47, 116, 105, 102, 102, 58, 79, 114, 105, 101,
          110, 116, 97, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 60,
          47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111,
          110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62,
          10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 76,
          194, 39, 89, 0, 0, 20, 68, 73, 68, 65, 84, 120, 1, 237, 157, 11, 176,
          93, 211, 25, 199, 169, 196, 35, 17, 162, 136, 71, 67, 130, 144, 120,
          36, 168, 71, 27, 226, 85, 42, 68, 69, 218, 170, 16, 237, 96, 134, 26,
          84, 25, 69, 165, 73, 135, 206, 152, 118, 106, 218, 208, 169, 49, 245,
          78, 181, 65, 181, 245, 152, 34, 222, 17, 33, 196, 251, 85, 241, 170,
          17, 207, 196, 155, 32, 226, 217, 255, 191, 206, 77, 119, 206, 62, 247,
          158, 123, 206, 185, 231, 156, 189, 214, 250, 125, 51, 255, 123, 206,
          89, 251, 181, 190, 223, 90, 251, 187, 107, 175, 181, 246, 222, 203,
          44, 131, 65, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0,
          4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16,
          128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0,
          2, 16, 88, 66, 96, 217, 37, 223, 248, 18, 58, 129, 62, 114, 96, 176,
          52, 72, 90, 95, 90, 91, 90, 75, 26, 32, 173, 46, 173, 82, 82, 63, 125,
          174, 36, 245, 150, 122, 149, 164, 143, 101, 62, 45, 233, 19, 125, 126,
          32, 45, 44, 233, 93, 125, 190, 33, 45, 144, 94, 147, 94, 149, 230,
          149, 244, 130, 62, 23, 75, 88, 224, 4, 8, 4, 225, 21, 96, 127, 101,
          121, 107, 105, 132, 180, 169, 52, 76, 26, 42, 249, 196, 111, 181, 125,
          161, 3, 190, 36, 61, 89, 210, 92, 125, 62, 82, 146, 131, 9, 22, 8, 1,
          2, 65, 177, 11, 106, 121, 101, 239, 235, 210, 14, 210, 72, 105, 91,
          105, 176, 84, 116, 251, 92, 25, 124, 90, 186, 95, 154, 93, 210, 99,
          250, 116, 58, 86, 64, 2, 4, 130, 98, 21, 202, 87, 148, 29, 159, 236,
          123, 148, 228, 147, 127, 69, 41, 6, 123, 79, 78, 204, 146, 110, 41,
          233, 241, 24, 156, 194, 7, 8, 244, 20, 1, 55, 245, 15, 148, 46, 149,
          222, 146, 220, 220, 78, 65, 47, 203, 207, 243, 164, 177, 146, 251, 55,
          48, 8, 36, 71, 224, 171, 242, 248, 112, 233, 38, 201, 157, 115, 41,
          156, 248, 93, 249, 248, 161, 24, 92, 41, 141, 151, 250, 74, 24, 4,
          162, 37, 176, 130, 60, 59, 64, 186, 86, 250, 88, 234, 234, 196, 72,
          121, 153, 59, 25, 47, 147, 70, 75, 190, 84, 194, 32, 16, 5, 129, 225,
          242, 226, 108, 233, 77, 41, 229, 19, 188, 30, 223, 61, 34, 241, 107,
          105, 176, 132, 65, 32, 56, 2, 30, 163, 119, 51, 215, 157, 99, 245,
          156, 0, 108, 179, 52, 183, 207, 196, 209, 45, 169, 189, 37, 58, 184,
          5, 1, 43, 54, 129, 85, 148, 189, 147, 36, 255, 39, 227, 100, 110, 14,
          3, 207, 89, 56, 66, 242, 165, 22, 6, 129, 66, 17, 240, 12, 190, 51,
          36, 207, 194, 35, 0, 180, 134, 193, 124, 177, 158, 40, 121, 166, 36,
          6, 129, 182, 18, 112, 0, 152, 34, 185, 215, 155, 0, 208, 30, 6, 238,
          123, 153, 44, 185, 53, 134, 65, 160, 165, 4, 86, 213, 209, 126, 35,
          185, 135, 155, 0, 80, 12, 6, 190, 31, 226, 4, 137, 75, 6, 65, 192,
          154, 75, 192, 83, 126, 93, 217, 24, 1, 40, 198, 201, 95, 41, 8, 207,
          83, 249, 252, 72, 162, 83, 81, 16, 176, 158, 39, 176, 143, 118, 249,
          140, 84, 169, 242, 145, 86, 60, 46, 115, 84, 86, 219, 247, 124, 53,
          96, 143, 169, 18, 216, 80, 142, 95, 39, 113, 178, 135, 199, 192, 55,
          57, 93, 44, 173, 41, 97, 16, 168, 139, 128, 231, 2, 184, 87, 154, 142,
          192, 240, 2, 64, 121, 208, 118, 255, 193, 97, 117, 213, 2, 54, 74,
          154, 192, 118, 242, 254, 81, 169, 188, 66, 241, 59, 108, 38, 51, 84,
          166, 110, 225, 97, 16, 232, 146, 128, 59, 3, 79, 151, 252, 180, 30,
          78, 250, 56, 25, 188, 175, 178, 61, 70, 162, 51, 81, 16, 176, 60, 129,
          45, 148, 228, 167, 235, 16, 0, 210, 96, 224, 231, 34, 172, 155, 175,
          6, 164, 164, 76, 192, 255, 33, 22, 73, 4, 129, 180, 24, 184, 239, 96,
          108, 202, 21, 31, 223, 191, 36, 176, 154, 62, 174, 150, 8, 0, 105, 51,
          248, 163, 234, 128, 47, 11, 177, 4, 9, 108, 37, 159, 159, 147, 8, 2,
          48, 112, 29, 240, 188, 131, 245, 37, 44, 33, 2, 135, 200, 87, 134, 5,
          9, 0, 229, 255, 4, 124, 169, 240, 237, 132, 206, 131, 100, 93, 93, 78,
          158, 159, 41, 149, 87, 0, 126, 195, 164, 163, 14, 120, 196, 232, 184,
          100, 207, 144, 4, 28, 247, 141, 66, 211, 165, 142, 2, 231, 19, 22, 93,
          213, 129, 243, 85, 87, 60, 169, 12, 139, 136, 192, 122, 242, 229, 113,
          169, 171, 130, 103, 25, 124, 202, 235, 192, 205, 170, 51, 220, 222,
          28, 73, 32, 24, 46, 63, 120, 98, 16, 39, 121, 249, 73, 222, 221, 223,
          15, 171, 254, 48, 223, 32, 240, 96, 176, 179, 242, 255, 142, 212, 221,
          66, 103, 61, 88, 85, 170, 3, 190, 181, 121, 227, 192, 207, 133, 46,
          179, 31, 243, 227, 162, 247, 146, 231, 55, 72, 238, 27, 192, 32, 208,
          8, 1, 15, 43, 250, 65, 180, 110, 93, 98, 1, 17, 248, 174, 242, 186,
          88, 170, 20, 221, 73, 131, 75, 189, 117, 224, 45, 213, 41, 158, 113,
          16, 72, 32, 248, 190, 242, 201, 219, 131, 56, 217, 235, 61, 217, 171,
          109, 231, 75, 77, 223, 157, 138, 21, 152, 192, 56, 229, 141, 183, 8,
          17, 4, 170, 157, 204, 141, 46, 127, 91, 245, 108, 219, 2, 159, 7, 53,
          103, 45, 166, 91, 49, 199, 200, 251, 171, 36, 230, 140, 215, 92, 13,
          216, 160, 14, 2, 110, 25, 236, 34, 249, 185, 21, 193, 91, 44, 129, 96,
          148, 74, 226, 38, 105, 165, 224, 75, 4, 7, 66, 34, 224, 119, 43, 236,
          36, 61, 27, 82, 166, 43, 229, 53, 134, 64, 176, 165, 28, 155, 41, 49,
          58, 80, 169, 132, 73, 107, 54, 129, 231, 117, 128, 29, 165, 87, 154,
          125, 160, 102, 238, 63, 244, 64, 224, 97, 29, 223, 53, 182, 118, 51,
          33, 177, 111, 8, 84, 33, 240, 176, 150, 123, 206, 202, 194, 42, 235,
          21, 118, 113, 200, 243, 8, 60, 245, 211, 79, 23, 38, 8, 20, 182, 122,
          37, 147, 177, 173, 228, 233, 21, 82, 175, 80, 61, 246, 221, 120, 33,
          154, 129, 95, 35, 141, 12, 49, 243, 228, 57, 74, 2, 67, 228, 149, 95,
          129, 231, 183, 54, 7, 103, 161, 6, 130, 179, 68, 250, 160, 224, 104,
          147, 225, 216, 9, 120, 72, 241, 117, 233, 190, 208, 28, 13, 177, 143,
          224, 48, 65, 190, 40, 52, 208, 228, 55, 25, 2, 158, 204, 230, 135,
          155, 184, 3, 59, 24, 11, 45, 16, 120, 122, 231, 29, 18, 47, 186, 12,
          166, 138, 37, 153, 81, 183, 10, 182, 150, 94, 14, 197, 251, 144, 2,
          129, 31, 52, 250, 144, 52, 40, 20, 184, 109, 204, 231, 71, 58, 246,
          211, 210, 83, 210, 115, 210, 11, 146, 43, 229, 2, 201, 47, 112, 245,
          100, 152, 15, 36, 223, 143, 241, 153, 228, 122, 224, 203, 196, 21,
          165, 190, 146, 135, 98, 215, 144, 124, 205, 251, 53, 201, 204, 55,
          146, 134, 74, 190, 11, 175, 183, 132, 117, 77, 224, 46, 45, 222, 85,
          242, 19, 143, 10, 111, 161, 4, 2, 231, 211, 157, 131, 251, 22, 158,
          104, 235, 51, 248, 185, 14, 233, 217, 109, 174, 120, 30, 74, 125, 80,
          122, 82, 242, 9, 222, 12, 243, 204, 205, 205, 36, 95, 15, 127, 67,
          242, 100, 174, 97, 18, 150, 39, 240, 123, 37, 157, 152, 79, 38, 165,
          94, 2, 126, 21, 121, 163, 243, 195, 99, 218, 222, 147, 87, 206, 151,
          190, 39, 185, 165, 212, 110, 243, 16, 238, 193, 210, 95, 37, 183, 56,
          98, 98, 221, 168, 47, 251, 136, 7, 214, 3, 4, 70, 104, 31, 110, 194,
          54, 90, 32, 161, 111, 255, 146, 24, 248, 63, 140, 255, 11, 23, 185,
          37, 231, 161, 221, 221, 165, 115, 37, 130, 194, 151, 151, 99, 3, 196,
          2, 107, 128, 128, 175, 89, 31, 151, 66, 63, 137, 235, 205, 191, 239,
          164, 252, 187, 180, 167, 20, 226, 228, 47, 95, 70, 248, 182, 240, 27,
          36, 95, 194, 212, 203, 33, 244, 237, 60, 241, 13, 107, 128, 192, 20,
          109, 27, 122, 37, 168, 39, 255, 175, 201, 239, 211, 36, 55, 185, 99,
          49, 119, 54, 158, 41, 189, 39, 213, 195, 36, 244, 109, 142, 136, 165,
          32, 91, 237, 199, 72, 29, 208, 29, 94, 161, 87, 128, 90, 242, 255,
          188, 252, 61, 90, 114, 75, 40, 86, 235, 47, 199, 38, 73, 126, 153, 72,
          45, 108, 66, 95, 247, 93, 249, 187, 158, 132, 213, 64, 192, 243, 4,
          230, 74, 161, 23, 126, 119, 243, 239, 206, 191, 163, 164, 148, 134,
          229, 250, 201, 223, 201, 146, 79, 144, 238, 114, 10, 125, 189, 233,
          242, 21, 171, 129, 192, 233, 90, 55, 244, 66, 239, 78, 254, 61, 150,
          127, 170, 212, 167, 6, 54, 177, 173, 186, 186, 28, 58, 91, 242, 120,
          123, 119, 152, 133, 190, 206, 132, 216, 10, 176, 89, 254, 120, 210,
          74, 10, 163, 4, 255, 144, 159, 52, 21, 255, 95, 139, 134, 235, 171,
          103, 141, 134, 126, 162, 87, 203, 255, 124, 249, 232, 203, 35, 172,
          10, 129, 91, 181, 188, 26, 204, 144, 151, 123, 24, 112, 223, 42, 12,
          82, 93, 236, 97, 209, 195, 37, 207, 124, 12, 185, 140, 171, 229, 253,
          156, 84, 11, 184, 187, 126, 143, 143, 188, 2, 92, 44, 255, 120, 146,
          82, 245, 218, 224, 105, 205, 30, 114, 172, 118, 66, 133, 186, 220,
          157, 224, 91, 85, 199, 144, 230, 26, 238, 41, 127, 94, 10, 181, 112,
          187, 202, 247, 91, 242, 203, 227, 233, 88, 109, 4, 142, 213, 234, 31,
          73, 93, 177, 13, 117, 217, 140, 218, 80, 164, 179, 246, 41, 145, 22,
          248, 125, 242, 107, 80, 58, 197, 216, 227, 158, 110, 173, 61, 250,
          198, 169, 80, 79, 248, 174, 242, 237, 41, 226, 88, 134, 128, 167, 96,
          198, 56, 140, 116, 161, 252, 242, 80, 40, 214, 24, 129, 213, 180, 249,
          141, 82, 87, 39, 85, 136, 203, 158, 149, 79, 41, 13, 25, 87, 173, 5,
          30, 62, 10, 177, 32, 59, 203, 179, 175, 1, 143, 175, 234, 53, 43, 212,
          66, 192, 183, 73, 255, 65, 234, 140, 121, 168, 233, 190, 252, 193, 68,
          160, 159, 228, 241, 244, 80, 11, 178, 60, 223, 31, 202, 151, 253, 36,
          172, 57, 4, 126, 170, 221, 58, 208, 150, 115, 15, 245, 183, 91, 5,
          152, 8, 236, 47, 133, 90, 136, 229, 249, 126, 91, 190, 236, 72, 169,
          54, 157, 192, 15, 116, 132, 152, 230, 154, 108, 217, 116, 98, 85, 14,
          80, 132, 59, 218, 124, 155, 113, 12, 246, 186, 156, 216, 85, 242, 3,
          66, 176, 230, 18, 240, 29, 153, 110, 117, 45, 106, 238, 97, 90, 182,
          247, 205, 91, 118, 164, 78, 14, 84, 132, 64, 224, 107, 191, 208, 205,
          55, 208, 124, 75, 122, 36, 116, 71, 2, 202, 191, 231, 25, 140, 149,
          60, 188, 24, 186, 21, 225, 60, 108, 59, 195, 3, 148, 131, 242, 38,
          118, 72, 191, 223, 87, 254, 183, 107, 59, 197, 116, 51, 48, 78, 174,
          135, 126, 159, 66, 219, 91, 4, 69, 168, 62, 30, 94, 11, 117, 156, 248,
          69, 229, 125, 251, 34, 64, 76, 60, 15, 158, 178, 29, 234, 180, 100,
          191, 188, 23, 43, 17, 112, 63, 129, 231, 224, 135, 210, 18, 240, 181,
          233, 20, 105, 85, 9, 43, 6, 1, 79, 75, 190, 68, 10, 169, 117, 240,
          128, 242, 235, 57, 52, 88, 134, 128, 79, 170, 137, 210, 221, 146, 39,
          23, 21, 233, 209, 86, 206, 139, 59, 3, 111, 150, 142, 147, 214, 148,
          176, 98, 18, 24, 164, 108, 77, 150, 102, 73, 69, 107, 37, 184, 30,
          189, 41, 221, 38, 253, 88, 98, 50, 145, 32, 96, 16, 128, 0, 4, 32, 0,
          1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4,
          32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128,
          0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16,
          128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0,
          2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8,
          64, 0, 2, 16, 128, 64, 129, 9, 44, 91, 37, 111, 126, 3, 203, 24, 233,
          96, 105, 164, 52, 80, 138, 225, 205, 68, 114, 3, 131, 64, 212, 4, 252,
          162, 88, 191, 34, 192, 175, 224, 155, 38, 249, 205, 80, 126, 138, 114,
          69, 235, 42, 16, 108, 161, 45, 166, 74, 219, 84, 220, 146, 68, 8, 64,
          32, 36, 2, 247, 42, 179, 135, 73, 79, 84, 202, 116, 103, 129, 96, 15,
          173, 124, 141, 212, 167, 210, 70, 164, 65, 0, 2, 65, 18, 240, 235,
          249, 252, 190, 200, 25, 229, 185, 175, 20, 8, 220, 18, 152, 35, 17, 4,
          202, 105, 241, 27, 2, 225, 19, 112, 48, 240, 107, 250, 230, 102, 93,
          41, 127, 11, 171, 127, 79, 149, 8, 2, 89, 74, 124, 135, 64, 60, 4, 86,
          150, 43, 23, 73, 75, 53, 2, 202, 3, 193, 24, 173, 64, 159, 64, 60,
          133, 142, 39, 16, 168, 68, 224, 155, 74, 28, 157, 93, 80, 30, 8, 60,
          58, 128, 65, 0, 2, 241, 19, 152, 144, 117, 177, 60, 16, 120, 136, 16,
          131, 0, 4, 226, 39, 48, 42, 235, 226, 82, 215, 9, 90, 224, 87, 74, 51,
          79, 32, 75, 136, 239, 16, 136, 147, 128, 207, 245, 222, 29, 174, 149,
          7, 130, 47, 58, 22, 240, 9, 1, 8, 68, 79, 96, 201, 249, 95, 126, 105,
          16, 189, 231, 56, 8, 1, 8, 228, 9, 16, 8, 242, 76, 72, 129, 64, 114,
          4, 8, 4, 201, 21, 57, 14, 67, 32, 79, 128, 64, 144, 103, 66, 10, 4,
          146, 35, 64, 32, 72, 174, 200, 113, 24, 2, 121, 2, 4, 130, 60, 19, 82,
          32, 144, 28, 1, 2, 65, 114, 69, 142, 195, 16, 200, 19, 32, 16, 228,
          153, 144, 2, 129, 228, 8, 16, 8, 146, 43, 114, 28, 134, 64, 158, 0,
          129, 32, 207, 132, 20, 8, 36, 71, 128, 64, 144, 92, 145, 227, 48, 4,
          242, 4, 8, 4, 121, 38, 164, 64, 32, 57, 2, 4, 130, 228, 138, 28, 135,
          33, 144, 39, 64, 32, 200, 51, 33, 5, 2, 201, 17, 32, 16, 36, 87, 228,
          56, 12, 129, 60, 1, 2, 65, 158, 9, 41, 16, 72, 142, 0, 129, 32, 185,
          34, 199, 97, 8, 228, 9, 16, 8, 242, 76, 72, 129, 64, 114, 4, 8, 4,
          201, 21, 57, 14, 67, 32, 79, 128, 64, 144, 103, 66, 10, 4, 146, 35,
          64, 32, 72, 174, 200, 113, 24, 2, 121, 2, 4, 130, 60, 19, 82, 32, 144,
          28, 1, 2, 65, 114, 69, 142, 195, 16, 200, 19, 32, 16, 228, 153, 144,
          2, 129, 228, 8, 16, 8, 146, 43, 114, 28, 134, 64, 158, 0, 129, 32,
          207, 132, 20, 8, 36, 71, 128, 64, 144, 92, 145, 227, 48, 4, 242, 4, 8,
          4, 121, 38, 164, 64, 32, 57, 2, 4, 130, 228, 138, 28, 135, 33, 144,
          39, 64, 32, 200, 51, 33, 5, 2, 201, 17, 32, 16, 36, 87, 228, 56, 12,
          129, 60, 1, 2, 65, 158, 9, 41, 16, 72, 142, 0, 129, 32, 185, 34, 199,
          97, 8, 228, 9, 16, 8, 242, 76, 72, 129, 64, 114, 4, 8, 4, 201, 21, 57,
          14, 67, 32, 79, 160, 60, 16, 124, 150, 95, 133, 20, 8, 64, 32, 66, 2,
          159, 100, 125, 42, 15, 4, 47, 101, 23, 242, 29, 2, 16, 136, 150, 192,
          139, 89, 207, 202, 3, 193, 93, 217, 133, 124, 135, 0, 4, 162, 37, 112,
          103, 214, 179, 242, 64, 48, 45, 187, 144, 239, 16, 128, 64, 180, 4,
          46, 205, 122, 182, 108, 246, 135, 190, 59, 48, 220, 45, 109, 95, 150,
          206, 79, 8, 64, 32, 30, 2, 110, 249, 239, 36, 125, 209, 225, 82, 121,
          32, 112, 250, 102, 210, 28, 105, 101, 255, 192, 32, 0, 129, 168, 8,
          188, 39, 111, 252, 143, 254, 169, 172, 87, 229, 151, 6, 94, 246, 132,
          52, 86, 122, 223, 63, 48, 8, 64, 32, 26, 2, 14, 2, 62, 183, 151, 10,
          2, 246, 174, 82, 32, 112, 250, 12, 201, 81, 227, 30, 255, 192, 32, 0,
          129, 224, 9, 248, 114, 192, 231, 244, 204, 74, 158, 84, 186, 52, 200,
          174, 231, 229, 163, 165, 9, 210, 40, 105, 61, 169, 151, 132, 65, 0, 2,
          197, 38, 224, 121, 2, 30, 34, 244, 232, 128, 59, 6, 111, 146, 150,
          244, 9, 232, 59, 6, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0,
          2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8,
          64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0,
          1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4,
          32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128,
          0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 32, 44,
          2, 125, 149, 221, 159, 73, 179, 37, 63, 127, 221, 79, 92, 45, 146,
          222, 81, 126, 238, 144, 38, 74, 3, 37, 172, 152, 4, 252, 164, 237, 73,
          210, 44, 233, 93, 169, 72, 117, 200, 121, 113, 221, 118, 29, 63, 81,
          226, 37, 66, 130, 144, 181, 141, 244, 227, 89, 169, 104, 133, 214, 89,
          126, 252, 168, 232, 11, 164, 1, 18, 86, 12, 2, 235, 40, 27, 83, 37,
          151, 77, 103, 229, 86, 180, 244, 231, 148, 215, 33, 18, 38, 2, 126,
          201, 202, 195, 82, 209, 10, 169, 59, 249, 121, 93, 249, 222, 93, 194,
          218, 75, 192, 239, 222, 120, 83, 234, 78, 153, 21, 109, 157, 71, 149,
          239, 206, 94, 52, 212, 94, 170, 45, 62, 250, 30, 129, 22, 96, 71, 133,
          90, 172, 252, 19, 12, 90, 92, 105, 50, 135, 115, 16, 248, 88, 234, 40,
          143, 16, 63, 219, 94, 127, 138, 16, 137, 182, 206, 20, 106, 136, 95,
          151, 87, 166, 175, 150, 70, 134, 152, 249, 192, 243, 236, 55, 250,
          254, 83, 234, 29, 184, 31, 35, 218, 157, 255, 34, 4, 130, 207, 218,
          13, 161, 7, 142, 239, 78, 159, 27, 37, 87, 76, 172, 53, 4, 118, 211,
          97, 166, 75, 238, 100, 14, 221, 220, 175, 145, 188, 133, 126, 105,
          144, 109, 138, 126, 160, 210, 220, 59, 249, 18, 109, 62, 128, 253,
          116, 136, 69, 82, 150, 125, 200, 223, 119, 110, 62, 178, 226, 31, 193,
          77, 107, 119, 186, 133, 92, 144, 217, 188, 59, 186, 31, 42, 97, 205,
          33, 112, 164, 118, 251, 169, 148, 101, 30, 242, 247, 249, 242, 165,
          87, 115, 80, 133, 183, 215, 211, 148, 229, 144, 11, 179, 82, 222, 79,
          151, 79, 213, 222, 54, 29, 94, 73, 181, 47, 199, 190, 140, 253, 157,
          84, 137, 117, 200, 105, 191, 104, 31, 210, 226, 29, 217, 215, 216,
          142, 140, 33, 23, 104, 165, 188, 95, 41, 159, 152, 52, 210, 120, 125,
          91, 85, 187, 184, 46, 194, 250, 241, 178, 124, 234, 211, 56, 158, 184,
          246, 112, 68, 132, 5, 237, 224, 48, 87, 218, 60, 174, 162, 106, 169,
          55, 91, 233, 104, 207, 72, 149, 2, 109, 232, 105, 135, 182, 148, 100,
          32, 7, 115, 211, 239, 33, 41, 244, 194, 173, 148, 127, 119, 34, 30,
          30, 72, 57, 20, 41, 155, 63, 81, 102, 62, 146, 42, 49, 13, 61, 237,
          126, 249, 197, 165, 99, 39, 181, 109, 215, 72, 11, 189, 163, 210, 94,
          37, 255, 152, 150, 220, 73, 225, 103, 146, 215, 213, 247, 235, 165,
          14, 110, 49, 126, 50, 212, 156, 41, 240, 74, 95, 47, 143, 188, 2, 120,
          132, 228, 224, 74, 142, 147, 246, 63, 2, 135, 233, 239, 219, 82, 140,
          39, 127, 135, 79, 151, 80, 214, 213, 9, 248, 230, 145, 34, 222, 53,
          214, 81, 136, 61, 245, 233, 9, 72, 155, 84, 199, 145, 204, 26, 238,
          71, 185, 93, 234, 41, 190, 69, 221, 143, 131, 28, 173, 66, 65, 232,
          142, 29, 171, 149, 138, 90, 144, 61, 153, 47, 207, 145, 159, 34, 245,
          239, 14, 148, 72, 215, 89, 93, 126, 157, 45, 121, 254, 69, 79, 178,
          45, 234, 190, 142, 138, 180, 28, 155, 226, 150, 59, 14, 239, 78, 164,
          98, 184, 194, 190, 37, 157, 44, 165, 52, 148, 228, 97, 213, 73, 210,
          59, 82, 81, 79, 218, 158, 206, 215, 76, 249, 74, 7, 161, 32, 212, 98,
          195, 180, 114, 76, 211, 72, 187, 83, 169, 22, 200, 103, 7, 132, 126,
          181, 128, 10, 108, 93, 183, 126, 38, 75, 111, 72, 221, 97, 18, 203,
          58, 31, 202, 223, 33, 18, 86, 7, 129, 159, 107, 155, 88, 42, 66, 45,
          126, 248, 191, 228, 25, 210, 160, 58, 152, 21, 117, 147, 141, 148,
          177, 179, 164, 133, 82, 45, 44, 98, 89, 247, 132, 162, 22, 76, 8, 249,
          90, 78, 153, 188, 51, 209, 138, 227, 19, 192, 115, 234, 255, 37, 141,
          147, 66, 188, 213, 214, 247, 145, 236, 47, 77, 151, 124, 151, 105, 44,
          39, 117, 173, 126, 220, 42, 223, 185, 36, 16, 132, 70, 108, 176, 54,
          78, 97, 20, 161, 90, 229, 242, 176, 227, 57, 210, 46, 146, 3, 100, 81,
          173, 151, 50, 182, 187, 116, 174, 20, 234, 83, 131, 170, 149, 69, 45,
          203, 61, 74, 48, 80, 194, 122, 128, 192, 15, 181, 143, 90, 224, 199,
          190, 174, 131, 130, 199, 162, 39, 72, 107, 73, 237, 54, 15, 249, 186,
          140, 166, 73, 156, 252, 75, 215, 213, 241, 237, 46, 156, 238, 28, 63,
          164, 230, 202, 84, 57, 116, 72, 119, 156, 74, 112, 157, 185, 242, 217,
          151, 80, 247, 74, 158, 186, 250, 132, 228, 161, 201, 102, 216, 10,
          218, 169, 199, 252, 183, 149, 182, 151, 70, 73, 67, 37, 44, 79, 224,
          79, 74, 10, 98, 184, 48, 164, 64, 224, 161, 181, 57, 210, 22, 121,
          222, 164, 148, 17, 240, 152, 252, 127, 164, 39, 37, 63, 41, 119, 158,
          244, 146, 244, 154, 228, 222, 122, 95, 106, 249, 254, 7, 207, 227,
          255, 84, 178, 185, 73, 191, 162, 212, 87, 114, 207, 254, 26, 210, 0,
          105, 160, 52, 72, 114, 103, 159, 71, 114, 54, 148, 188, 46, 214, 53,
          129, 7, 181, 120, 7, 105, 113, 215, 171, 21, 99, 105, 72, 129, 192,
          196, 60, 19, 207, 255, 241, 98, 30, 94, 179, 159, 88, 216, 4, 220, 47,
          176, 157, 228, 96, 28, 132, 121, 226, 78, 72, 246, 180, 50, 235, 107,
          81, 247, 1, 96, 16, 40, 34, 1, 143, 142, 28, 40, 5, 19, 4, 12, 177,
          200, 189, 207, 206, 95, 37, 123, 74, 137, 159, 75, 187, 85, 90, 72,
          26, 4, 218, 76, 224, 20, 29, 255, 47, 109, 206, 67, 50, 135, 247, 37,
          205, 223, 164, 216, 71, 7, 240, 47, 172, 50, 254, 115, 168, 103, 96,
          104, 125, 4, 89, 206, 238, 216, 186, 85, 114, 135, 12, 6, 129, 118,
          19, 152, 161, 12, 140, 150, 220, 81, 27, 156, 133, 28, 8, 12, 219,
          119, 174, 249, 230, 164, 141, 253, 3, 131, 64, 155, 8, 120, 116, 102,
          164, 228, 169, 225, 65, 90, 104, 157, 133, 229, 144, 61, 121, 101, 47,
          105, 126, 249, 2, 126, 67, 160, 69, 4, 60, 44, 235, 150, 64, 176, 65,
          192, 156, 66, 15, 4, 246, 193, 227, 228, 123, 74, 30, 178, 193, 32,
          208, 74, 2, 254, 71, 228, 186, 247, 66, 43, 15, 218, 140, 99, 197, 16,
          8, 204, 229, 49, 105, 31, 201, 147, 100, 48, 8, 180, 130, 128, 239,
          162, 28, 35, 121, 86, 103, 240, 22, 75, 32, 112, 65, 184, 175, 224,
          59, 210, 135, 254, 129, 65, 160, 137, 4, 222, 215, 190, 247, 150, 60,
          165, 59, 10, 139, 41, 16, 184, 64, 110, 151, 246, 149, 22, 73, 24, 4,
          154, 65, 192, 173, 78, 183, 4, 238, 106, 198, 206, 219, 181, 207, 216,
          2, 129, 57, 222, 38, 185, 101, 192, 101, 130, 105, 96, 61, 73, 224,
          61, 237, 204, 157, 211, 179, 122, 114, 167, 69, 216, 87, 232, 195,
          135, 93, 49, 244, 112, 206, 245, 146, 111, 160, 193, 32, 208, 40, 1,
          119, 12, 122, 116, 224, 129, 70, 119, 84, 196, 237, 99, 14, 4, 230,
          189, 165, 116, 163, 180, 150, 127, 96, 16, 168, 147, 192, 203, 218,
          206, 65, 224, 223, 117, 110, 95, 248, 205, 98, 188, 52, 200, 66, 127,
          68, 63, 60, 243, 208, 55, 43, 97, 16, 168, 135, 192, 19, 218, 200,
          173, 203, 104, 131, 64, 61, 80, 66, 221, 198, 51, 16, 103, 75, 204,
          221, 135, 65, 45, 117, 224, 14, 213, 153, 213, 66, 173, 244, 228, 187,
          50, 129, 149, 148, 124, 153, 84, 75, 69, 96, 221, 116, 121, 77, 85,
          93, 89, 94, 194, 34, 37, 48, 89, 126, 249, 54, 102, 78, 114, 24, 84,
          170, 3, 126, 158, 192, 201, 145, 214, 125, 220, 42, 35, 48, 78, 191,
          121, 50, 50, 129, 160, 60, 16, 248, 141, 83, 158, 161, 138, 37, 68,
          192, 119, 44, 62, 42, 149, 87, 6, 126, 167, 201, 228, 33, 213, 133,
          13, 18, 170, 255, 184, 154, 33, 208, 71, 223, 47, 150, 56, 249, 211,
          102, 112, 158, 234, 128, 159, 111, 129, 37, 78, 224, 32, 249, 207,
          165, 66, 122, 193, 192, 119, 172, 250, 77, 76, 24, 4, 150, 16, 112,
          179, 208, 243, 199, 105, 29, 164, 193, 96, 166, 202, 122, 253, 37,
          165, 207, 23, 8, 100, 8, 120, 130, 213, 137, 146, 111, 90, 34, 32,
          196, 201, 192, 119, 167, 30, 47, 197, 62, 171, 86, 46, 98, 141, 18,
          216, 84, 59, 184, 71, 34, 24, 196, 197, 192, 55, 11, 13, 109, 180,
          114, 176, 125, 90, 4, 220, 58, 56, 70, 162, 239, 32, 252, 96, 224,
          199, 136, 29, 41, 209, 10, 16, 4, 172, 62, 2, 235, 106, 51, 30, 157,
          30, 110, 48, 152, 166, 242, 91, 167, 190, 162, 103, 43, 8, 228, 9,
          236, 172, 36, 143, 53, 115, 185, 16, 6, 3, 223, 46, 188, 99, 190, 24,
          73, 129, 64, 227, 4, 124, 185, 112, 184, 228, 219, 82, 9, 8, 197, 100,
          240, 130, 202, 230, 80, 201, 101, 133, 65, 160, 169, 4, 124, 3, 211,
          68, 201, 215, 158, 4, 132, 98, 48, 240, 244, 224, 147, 36, 38, 6, 9,
          2, 214, 90, 2, 190, 69, 245, 87, 18, 1, 161, 125, 193, 192, 1, 224,
          151, 210, 42, 18, 6, 129, 182, 18, 232, 175, 163, 159, 42, 189, 33,
          209, 66, 104, 13, 131, 5, 98, 61, 73, 34, 0, 8, 2, 86, 44, 2, 190,
          119, 225, 104, 233, 89, 137, 128, 208, 28, 6, 126, 218, 148, 135, 2,
          185, 4, 16, 4, 172, 216, 4, 220, 81, 53, 86, 186, 65, 226, 217, 7,
          141, 7, 4, 63, 35, 224, 90, 201, 143, 17, 167, 19, 80, 16, 176, 240,
          8, 12, 81, 150, 127, 43, 189, 34, 209, 74, 168, 141, 129, 223, 43,
          248, 107, 105, 3, 9, 131, 64, 20, 4, 150, 147, 23, 126, 232, 197, 21,
          146, 231, 187, 19, 20, 42, 51, 240, 251, 40, 46, 151, 246, 146, 204,
          12, 131, 64, 180, 4, 86, 150, 103, 190, 245, 249, 106, 137, 27, 156,
          190, 12, 140, 87, 138, 197, 120, 169, 175, 132, 65, 32, 57, 2, 174,
          248, 227, 164, 11, 165, 249, 82, 42, 45, 133, 87, 229, 235, 5, 146,
          251, 82, 60, 47, 3, 107, 35, 1, 110, 194, 104, 35, 252, 10, 135, 118,
          121, 140, 144, 118, 47, 105, 39, 125, 246, 147, 98, 48, 191, 46, 236,
          78, 233, 150, 146, 252, 6, 107, 172, 32, 4, 8, 4, 5, 41, 136, 78, 178,
          225, 30, 242, 225, 146, 231, 204, 239, 32, 109, 35, 109, 34, 21, 189,
          231, 220, 35, 37, 79, 73, 158, 239, 63, 187, 36, 159, 248, 78, 199,
          10, 72, 128, 64, 80, 192, 66, 169, 146, 37, 95, 74, 184, 213, 224,
          215, 185, 109, 42, 13, 43, 125, 14, 212, 103, 171, 203, 211, 151, 49,
          238, 217, 159, 155, 209, 35, 250, 238, 135, 194, 186, 67, 20, 11, 132,
          64, 171, 43, 78, 32, 88, 130, 204, 230, 10, 202, 245, 122, 210, 160,
          146, 214, 214, 231, 0, 105, 45, 105, 77, 105, 21, 201, 151, 25, 150,
          39, 62, 245, 206, 72, 95, 151, 249, 36, 35, 159, 196, 11, 37, 55, 231,
          45, 207, 152, 244, 76, 190, 215, 36, 247, 99, 204, 43, 233, 69, 125,
          46, 150, 48, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16,
          128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0,
          2, 16, 128, 0, 4, 32, 0, 1, 8, 64, 0, 2, 16, 128, 0, 4, 32, 0, 1, 8,
          64, 0, 2, 16, 136, 135, 192, 127, 1, 176, 114, 79, 48, 90, 36, 244,
          123, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130,
        ],
      },
    },
    time_simple: '12:47 PM',
    _id: 'chatid0005',
  },
];

const messagesFetchSpy = vi.spyOn(messagesFetch, 'default');
const SendFetchSpy = vi.spyOn(SendFetch, 'default');
const ImageFetchSpy = vi.spyOn(ImageFetch, 'default');

describe('from messagesFetch result', () => {
  test('should render error page', async () => {
    messagesFetchSpy.mockReturnValue({ error: true });

    render(
      <chatContext.Provider value={{}}>
        <Chat />
      </chatContext.Provider>,
    );
    await waitFor(async () => {
      expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
    });

    const error = await screen.findByTestId('error');

    expect(error).toBeInTheDocument;
  });

  test('should render loading page', async () => {
    messagesFetchSpy.mockReturnValue({ messages: null });

    render(
      <chatContext.Provider value={{}}>
        <Chat />
      </chatContext.Provider>,
    );

    const loading = await screen.findByTestId('loading');
    expect(loading).toBeInTheDocument;
  });

  test('should show no chat selected', async () => {
    messagesFetchSpy.mockReturnValue({ messages: null });

    render(
      <chatContext.Provider value={{}}>
        <Chat />
      </chatContext.Provider>,
    );

    await waitFor(async () => {
      expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
    });

    const noChat = await screen.findByTestId('no-chat');

    expect(noChat).toBeInTheDocument();
  });
});

describe('when click on user to chat', () => {
  test('should render chat error with selected user name', async () => {
    messagesFetchSpy.mockReturnValue({ error: true });

    render(
      <chatContext.Provider value={{ chatProfile }}>
        <Chat />
      </chatContext.Provider>,
    );
    await waitFor(async () => {
      expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
    });

    const user = await screen.findByTestId('chat-title');
    const error = await screen.findByTestId('error');

    expect(user.textContent).toMatch(/foobar/i);
    expect(error).toBeInTheDocument;
  });

  test('should render chat loading with selected user name', async () => {
    messagesFetchSpy.mockReturnValue({ messages: null });

    render(
      <chatContext.Provider value={{ chatProfile }}>
        <Chat />
      </chatContext.Provider>,
    );

    const user = screen.getByTestId('chat-title');
    const loading = screen.getByTestId('loading');

    expect(user.textContent).toMatch(/foobar/i);
    expect(loading).toBeInTheDocument;

    await waitFor(async () => {
      expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
    });
  });

  test('should show there is no message when no conversation is found', async () => {
    messagesFetchSpy.mockReturnValue({ messages: null });

    render(
      <chatContext.Provider value={{ chatProfile }}>
        <Chat />
      </chatContext.Provider>,
    );

    const user = screen.getByTestId('chat-title');
    const noMessage = await screen.findByTestId('no-message');
    const input = await screen.findByTestId('input');

    expect(user.textContent).toMatch(/foobar/i);
    expect(noMessage).toBeInTheDocument();
    expect(input).toBeInTheDocument();
  });

  test('should show messages in conversation area', async () => {
    messagesFetchSpy.mockReturnValue({ messages });
    window.HTMLElement.prototype.scrollIntoView = function () {};

    render(
      <chatContext.Provider value={{ chatProfile }}>
        <Chat loginId={'9999'} />
      </chatContext.Provider>,
    );

    await waitFor(async () => {
      expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
    });

    const user = screen.getByTestId('chat-title');
    const messageContainers = await screen.findAllByTestId('date');
    const input = await screen.findByTestId('input');

    const date1 = messageContainers[0].childNodes[0];
    const date2 = messageContainers[1].childNodes[0];

    const textContainer1 = messageContainers[0].childNodes[1].childNodes[0];
    const textContainer2 = messageContainers[0].childNodes[2].childNodes[0];
    const textContainer3 = messageContainers[1].childNodes[1].childNodes[0];
    const textContainer4 = messageContainers[1].childNodes[2].childNodes[0];

    const text1 = textContainer1.childNodes[0].childNodes[0];
    const text2 = textContainer2.childNodes[0].childNodes[0];
    const text3 = textContainer3.childNodes[0].childNodes[0];
    const text4 = textContainer4.childNodes[0].childNodes[0];

    const time1 = textContainer1.childNodes[0].childNodes[1];
    const time2 = textContainer2.childNodes[0].childNodes[1];
    const time3 = textContainer3.childNodes[0].childNodes[1];
    const time4 = textContainer4.childNodes[0].childNodes[1];

    expect(user.textContent).toMatch(/foobar/i);

    expect(date1.textContent).toMatch(/Feb 1, 2024/i);
    expect(date2.textContent).toMatch(/Feb 11, 2024/i);

    expect(textContainer1.className).toMatch(/received/i);
    expect(textContainer2.className).toMatch(/sent/i);
    expect(textContainer3.className).toMatch(/received/i);
    expect(textContainer4.className).toMatch(/sent/i);

    expect(text1.textContent).toMatch(/Foobar to John Doe Feb 1/i);
    expect(text2.textContent).toMatch(/John Doe to Foobar Feb 1/i);
    expect(text3.textContent).toMatch(/Foobar to John Doe Feb 11/i);
    expect(text4.textContent).toMatch(/John Doe to Foobar Feb 11/i);

    expect(time1.textContent).toMatch(/7:51 AM/i);
    expect(time2.textContent).toMatch(/8:51 AM/i);
    expect(time3.textContent).toMatch(/9:32 PM/i);
    expect(time4.textContent).toMatch(/10:32 PM/i);

    expect(input).toBeInTheDocument();
  });
});

describe('chat input', () => {
  beforeEach(() => {
    messagesFetchSpy.mockReturnValue({ messages });
    window.HTMLElement.prototype.scrollIntoView = function () {};
  });
  describe('message input', () => {
    test('should show user input value', async () => {
      const user = userEvent.setup();

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const input = await screen.findByRole('textbox');

      await user.type(input, 'New message to Foobar');

      expect(input.value).toMatch(/New message to Foobar/i);
    });

    test('should show server error after send', async () => {
      const user = userEvent.setup();

      SendFetchSpy.mockReturnValue({ error: true });

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      const chatTitle = screen.getByTestId('chat-title');

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const input = await screen.findByRole('textbox');
      const button = await screen.findByTestId('submit');

      await user.type(input, 'New message to Foobar');
      await user.click(button);

      const error = await screen.findByTestId('error');

      expect(chatTitle.textContent).toMatch(/foobar/i);
      expect(error).toBeInTheDocument;
    });

    test('should show loading after send', async () => {
      const user = userEvent.setup();

      SendFetchSpy.mockReturnValue({});

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      const chatTitle = screen.getByTestId('chat-title');

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const input = await screen.findByRole('textbox');
      const button = await screen.findByTestId('submit');

      await user.type(input, 'New message to Foobar');
      await user.click(button);

      const loading = await screen.findByTestId('loading');

      expect(chatTitle.textContent).toMatch(/foobar/i);
      expect(loading).toBeInTheDocument;
    });

    test('should send message with input value', async () => {
      const user = userEvent.setup();

      messagesFetchSpy
        .mockReturnValueOnce({ messages })
        .mockReturnValueOnce({ messages: updatedMessages });

      SendFetchSpy.mockReturnValue({ responseData: { createdMessage: {} } });

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const messageContainers = await screen.findAllByTestId('date');
      expect(messageContainers).toHaveLength(2);

      const input = await screen.findByRole('textbox');
      const buttonNone = await screen.findByTestId('submit');
      const buttonNoneStyle = getComputedStyle(buttonNone);

      expect(messageContainers).toHaveLength(2);
      expect(buttonNoneStyle.display).toMatch('none');

      await user.type(input, 'New message to Foobar');
      const buttonBlock = await screen.findByTestId('submit');
      const buttonBlockStyle = getComputedStyle(buttonBlock);
      expect(buttonBlockStyle.display).toMatch('block');

      await user.click(buttonBlock);

      await waitFor(async () => {
        expect(SendFetchSpy).toHaveBeenCalledTimes(1);
      });

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(2);
      });

      const upDatedMessageContainers = await screen.findAllByTestId('date');
      expect(upDatedMessageContainers).toHaveLength(3);

      expect(SendFetchSpy).toHaveBeenCalledWith({
        user_id: '1001',
        message: 'New message to Foobar',
      });
      expect(input.value).toMatch('');
    });
  });

  describe('image upload', () => {
    test('should show choose image when click on image button', async () => {
      const user = userEvent.setup();

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const imageButton = await screen.findByTestId('image');
      await user.click(imageButton);

      const input = await screen.findByTestId('choose-image');

      expect(input).toBeInTheDocument();
    });

    test('should show chat input when click on chat button', async () => {
      const user = userEvent.setup();

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const imageButton = await screen.findByTestId('image');
      await user.click(imageButton);

      const inputFile = await screen.findByTestId('choose-image');
      expect(inputFile).toBeInTheDocument();

      const chatButton = await screen.findByTestId('chat');
      await user.click(chatButton);

      const inputText = await screen.findByRole('textbox');

      expect(inputFile).not.toBeInTheDocument();
      expect(inputText).toBeInTheDocument();
    });

    test('should show server error after send', async () => {
      const user = userEvent.setup();
      const file = new File(['foobar'], 'foobar.png', { type: 'image/png' });

      messagesFetchSpy.mockReturnValueOnce({ messages });

      ImageFetchSpy.mockReturnValue({ error: true });

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      const chatTitle = screen.getByTestId('chat-title');

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const imageButton = await screen.findByTestId('image');
      await user.click(imageButton);

      const inputFile = await screen.findByTestId('choose-image');
      await user.upload(inputFile, file);

      expect(screen.getByText('foobar.png')).toBeInTheDocument();

      const send = await screen.findByTestId('submit');
      await user.click(send);

      await waitFor(async () => {
        expect(ImageFetchSpy).toHaveBeenCalledWith({
          image: file,
          user_id: '1001',
        });
      });

      const error = await screen.findByTestId('error');

      expect(chatTitle.textContent).toMatch(/foobar/i);
      expect(error).toBeInTheDocument;
    });

    test('should show loading after send', async () => {
      const user = userEvent.setup();
      const file = new File(['foobar'], 'foobar.png', { type: 'image/png' });

      messagesFetchSpy.mockReturnValueOnce({ messages });

      ImageFetchSpy.mockReturnValue({});

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      const chatTitle = screen.getByTestId('chat-title');

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const imageButton = await screen.findByTestId('image');
      await user.click(imageButton);

      const inputFile = await screen.findByTestId('choose-image');
      await user.upload(inputFile, file);

      expect(screen.getByText('foobar.png')).toBeInTheDocument();

      const send = await screen.findByTestId('submit');
      await user.click(send);

      await waitFor(async () => {
        expect(ImageFetchSpy).toHaveBeenCalledWith({
          image: file,
          user_id: '1001',
        });
      });

      const loading = await screen.findByTestId('loading');

      expect(chatTitle.textContent).toMatch(/foobar/i);
      expect(loading).toBeInTheDocument;
    });

    test('should send image with selected file', async () => {
      const user = userEvent.setup();
      const file = new File(['foobar'], 'foobar.png', { type: 'image/png' });

      messagesFetchSpy
        .mockReturnValueOnce({ messages })
        .mockReturnValueOnce({ messages: updatedMessagesImage });

      ImageFetchSpy.mockReturnValue({ responseData: { createdMessage: {} } });

      render(
        <chatContext.Provider value={{ chatProfile }}>
          <Chat loginId={'9999'} />
        </chatContext.Provider>,
      );

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(1);
      });

      const messageContainers = await screen.findAllByTestId('date');
      expect(messageContainers).toHaveLength(2);

      const imageButton = await screen.findByTestId('image');
      await user.click(imageButton);

      const inputFile = await screen.findByTestId('choose-image');
      await user.upload(inputFile, file);

      expect(screen.getByText('foobar.png')).toBeInTheDocument();

      const send = await screen.findByTestId('submit');
      await user.click(send);

      await waitFor(async () => {
        expect(ImageFetchSpy).toHaveBeenCalledWith({
          image: file,
          user_id: '1001',
        });
      });

      await waitFor(async () => {
        expect(messagesFetchSpy).toHaveBeenCalledTimes(2);
      });

      const upDatedMessageContainers = await screen.findAllByTestId('date');
      expect(upDatedMessageContainers).toHaveLength(3);

      const inputText = await screen.findByRole('textbox');
      expect(inputText).toBeInTheDocument();
    });
  });
});
